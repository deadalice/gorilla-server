require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "Users", type: :request do

  # TODO: For a new user
  # let(:new_user_attributes) {
  #   FactoryBot.attributes_for(:user1, name: "user3", email: "user3@example.com")
  # }

  describe "GET /user" do
    context "signed in" do
      it "renders a successful response" do
        user = FactoryBot.create(:user1)
        sign_in user
        get user_url
        expect(response).to be_successful
      end

      it "renders a successful response for user1" do
        user = FactoryBot.create(:user1)
        sign_in user
        get "/user1"
        expect(response).to be_successful
      end
    end

    context "not signed in" do
      it "render an unsuccessful response" do
        user = FactoryBot.create(:user1)
        get edit_user_url(user)
        expect(response).to have_http_status :unauthorized
      end
    end
  end

  describe "PATCH /update" do
    let(:valid_attributes) {
      {
        fullname: "Test Test",
      }
    }
    let(:invalid_attributes) {
      {
        email: "123",
      }
    }

    context "with valid parameters" do
      it "updates the requested user" do
        user = FactoryBot.create(:user1)
        sign_in user
        patch user_url, params: { user: valid_attributes }
        user.reload
        expect(user.fullname).to eq "Test Test"
      end

      it "redirects to the user" do
        user = FactoryBot.create(:user1)
        sign_in user
        patch user_url, params: { user: valid_attributes }
        user.reload
        expect(response).to redirect_to(user_url)
      end
    end

    context "with invalid parameters" do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        user = FactoryBot.create(:user1)
        sign_in user
        patch user_url, params: { user: invalid_attributes }
        expect(response).not_to be_successful
      end
    end
  end
end
